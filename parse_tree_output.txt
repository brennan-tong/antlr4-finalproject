prog
 programDeclaration
  program
  TestInput
  ;
 declaration
  constDeclaration
   const
   constAssignmentList
    constValue
    =
    constExpression
     simpleExpression
      term
       factor
        number
         42
    ;
    constString
    =
    constExpression
     simpleExpression
      term
       factor
        stringConstant
         'Hello, World!'
    ;
 declaration
  typeDefDeclaration
   type
   typeDefList
    typeDefElement
     myInteger
     =
     typeSpecification
      simpleType
       integer
     ;
    typeDefElement
     myArray
     =
     typeSpecification
      array
      [
      subrange
       expression
        simpleExpression
         term
          factor
           number
            1
       ..
       expression
        simpleExpression
         term
          factor
           number
            5
      ]
      of
      typeIdentifier
       myInteger
     ;
    typeDefElement
     arrayOfArrays
     =
     typeSpecification
      array
      [
      subrange
       expression
        simpleExpression
         term
          factor
           number
            1
       ..
       expression
        simpleExpression
         term
          factor
           number
            2
      ]
      of
      typeIdentifier
       myArray
     ;
 declaration
  varDeclaration
   var
   varDeclarationList
    varIdentifierList
     globalVar
    :
    typeIdentifier
     myInteger
    ;
   varDeclarationList
    varIdentifierList
     arr
    :
    typeIdentifier
     myArray
    ;
   varDeclarationList
    varIdentifierList
     arrOfArrs
    :
    typeIdentifier
     arrayOfArrays
    ;
   varDeclarationList
    varIdentifierList
     a
     ,
     b
     ,
     max
    :
    typeIdentifier
     integer
    ;
 declaration
  functionDeclaration
   function
   addNumbers
   (
   paramDeclaration
    paramIdentifierList
     a
     ,
     b
    :
    typeIdentifier
     myInteger
   )
   :
   typeIdentifier
    myInteger
   ;
   declaration
    varDeclaration
     var
     varDeclarationList
      varIdentifierList
       localVar
      :
      typeIdentifier
       myInteger
      ;
   begin
   statement
    assignment
     variable
      localVar
     :=
     expression
      simpleExpression
       term
        factor
         variable
          a
       +
       term
        factor
         variable
          b
     ;
   statement
    assignment
     variable
      addNumbers
     :=
     expression
      simpleExpression
       term
        factor
         variable
          localVar
     ;
   end
   ;
 declaration
  functionDeclaration
   function
   multiplyNumbers
   (
   paramDeclaration
    paramIdentifierList
     a
     ,
     b
    :
    typeIdentifier
     myInteger
   )
   :
   typeIdentifier
    myInteger
   ;
   begin
   statement
    assignment
     variable
      multiplyNumbers
     :=
     expression
      simpleExpression
       term
        factor
         variable
          a
        *
        factor
         variable
          b
     ;
   end
   ;
 begin
 statement
  assignment
   variable
    a
   :=
   expression
    simpleExpression
     term
      factor
       number
        5
   ;
 statement
  assignment
   variable
    b
   :=
   expression
    simpleExpression
     term
      factor
       number
        10
   ;
 statement
  ifStatement
   if
   expression
    simpleExpression
     term
      factor
       variable
        a
    >
    simpleExpression
     term
      factor
       variable
        b
   then
   statement_or_comment
    statement_without_semicolon
     assignment_without_semicolon
      variable
       max
      :=
      expression
       simpleExpression
        term
         factor
          variable
           a
   else
   statement_or_comment
    statement
     assignment
      variable
       max
      :=
      expression
       simpleExpression
        term
         factor
          variable
           b
      ;
 statement
  writeln
   writeln
   (
   writelnArg
    writelnExpression
     expression
      simpleExpression
       term
        factor
         stringConstant
          'The maximum value is: '
   ,
   writelnArg
    writelnExpression
     expression
      simpleExpression
       term
        factor
         variable
          max
   )
   ;
 statement
  assignment
   variable
    globalVar
   :=
   expression
    simpleExpression
     term
      factor
       variable
        constValue
   ;
 statement
  assignment
   variable
    myInteger
   :=
   expression
    simpleExpression
     term
      factor
       functionCall
        multiplyNumbers
        (
        expression
         simpleExpression
          term
           factor
            variable
             myInteger
        ,
        expression
         simpleExpression
          term
           factor
            variable
             globalVar
        )
   ;
 statement
  writeln
   writeln
   (
   writelnArg
    writelnExpression
     expression
      simpleExpression
       term
        factor
         stringConstant
          'Result: '
   ,
   writelnArg
    writelnExpression
     multiDimensionalArrayIndexing
      variable
       arrOfArrs
      [
      expression
       simpleExpression
        term
         factor
          number
           1
      ]
      [
      expression
       simpleExpression
        term
         factor
          number
           1
      ]
   )
   ;
 end
 .
 <EOF>
